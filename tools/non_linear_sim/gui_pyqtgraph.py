import sys

import numpy as np
import pyqtgraph as pg
import pyqtgraph.opengl as gl
from pyqtgraph.Qt import QtGui, QtWidgets


# TODO: Plot with cb to data generated by simulation.
# TODO: Some method to update simulation model, menu, buttons etc.
# TODO: Refactor when done...


class Gui(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(Gui, self).__init__(parent)
        self.setWindowTitle('Getting started...')
        self.setGeometry(100, 100, 1200, 800)

        #   1. Create a grid as central (main) widget, to place other widgets in.
        self.central_widget = QtWidgets.QWidget()
        self.setCentralWidget(self.central_widget)
        self.grid = QtWidgets.QGridLayout(self.centralWidget())

        #   2. Create three plot (2d line) widgets (and add some data, labels etc.)
        self.plot_0 = pg.PlotWidget()
        self.plot_1 = pg.PlotWidget()
        self.plot_2 = pg.PlotWidget()

        p0 = self.plot_0.plot()
        p0.setData(x=[0, 1], y=[0, 1])

        t = np.arange(0, 10, 0.01)
        self.plot_1.addItem(pg.PlotDataItem(x=t, y=np.sin(2 * np.pi * t)))
        self.plot_1.setLabel('bottom', 'Time', units='s')
        self.plot_1.setLabel('left', 'sin(t)', units='h')

        self.plot_2.addItem(pg.PlotDataItem(x=[0, -1], y=[0, 1]))

        #   3. Create one (3d) scatter plot (with grid and axis) item and place in GLViewWidget
        self.scatter = gl.GLScatterPlotItem(pos=np.random.rand(10, 3))
        self.scatter_grid = gl.GLGridItem()
        self.scatter_axis = gl.GLAxisItem()

        self.view = gl.GLViewWidget()
        self.view.addItem(self.scatter)
        self.view.addItem(self.scatter_grid)
        self.view.addItem(self.scatter_axis)

        #   4. Set same size policy (see https://groups.google.com/g/pyqtgraph/c/mTlUfT0ozT8) between plot and
        #   scatter widget (otherwise the 3d scatter will not be visable).
        self.plot_0.sizeHint = self.view.sizeHint = lambda: pg.QtCore.QSize(100, 100)
        self.plot_1.sizeHint = self.view.sizeHint = lambda: pg.QtCore.QSize(100, 100)
        self.plot_2.sizeHint = self.view.sizeHint = lambda: pg.QtCore.QSize(100, 100)

        self.view.setSizePolicy(self.plot_0.sizePolicy())

        #   5. Place widgets in grid (they occupy the same space (1x1)).
        self.grid.addWidget(self.view, 0, 0, 1, 1)
        self.grid.addWidget(self.plot_0, 0, 1, 1, 1)
        self.grid.addWidget(self.plot_1, 1, 0, 1, 1)
        self.grid.addWidget(self.plot_2, 1, 1, 1, 1)


def main():
    qt_app = QtGui.QApplication(sys.argv)
    gui = Gui()
    gui.show()
    sys.exit(qt_app.exec_())


if __name__ == '__main__':
    main()
